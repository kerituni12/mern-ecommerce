{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, Box, Typography } from \"@material-ui/core\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { useRouter } from \"next/router\";\nconst currencies = [{\n  value: \"USD\",\n  label: \"$\"\n}, {\n  value: \"EUR\",\n  label: \"€\"\n}, {\n  value: \"BTC\",\n  label: \"฿\"\n}, {\n  value: \"JPY\",\n  label: \"¥\"\n}];\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1,\n    boxShadow: \"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginBottom: theme.spacing(1.5)\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  menu: {\n    width: 200\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\nexport default function CategoryCreate() {\n  const classes = useStyles();\n  let categorySchema = yup.object().shape({\n    title: yup.string().required(),\n    slug: yup.string().required()\n  });\n  const {\n    control,\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    validationSchema: categorySchema\n  });\n  const router = useRouter();\n  const {\n    category\n  } = router.query;\n  React.useEffect(() => {\n    // if first router = undefined will have error controlled input\n    if (category !== undefined) {\n      fetch(`http://localhost:3001/api/category/${category}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(({\n        data\n      }) => {\n        if (data) {\n          setValue(\"title\", data.title);\n          setValue(\"slug\", data.description);\n        }\n      }).catch(error => {\n        console.error(\"Error:\", error);\n      });\n    }\n\n    return () => {\n      console.log(\"cleaner\");\n    };\n  }, [category]);\n\n  const onSubmit = values => {\n    console.log(values);\n    const {\n      title,\n      slug,\n      description\n    } = values; // ${process.env.REACT_APP_API_BASE}/api/v1/users/login/\n\n    fetch(\"http://localhost:3001/api/category\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // mode: \"cors\",\n      body: JSON.stringify({\n        title: title,\n        slug: slug,\n        description: description\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Success:\", data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: classes.container\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Controller, {\n    as: __jsx(TextField, {\n      label: \"Category\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true\n    }),\n    name: \"title\",\n    control: control,\n    defaultValue: \"\"\n  }), __jsx(Controller, {\n    as: __jsx(TextField, {\n      label: \"Slug\",\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true\n    }),\n    name: \"slug\",\n    control: control,\n    defaultValue: \"\"\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    name: \"description\",\n    inputRef: register,\n    label: \"Description\",\n    defaultValue: \"description\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    multiline: true\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    className: classes.button,\n    type: \"submit\",\n    variant: \"outlined\",\n    \"aria-label\": \"delete\",\n    color: \"primary\"\n  }, \"Save\")))));\n}","map":null,"metadata":{},"sourceType":"module"}