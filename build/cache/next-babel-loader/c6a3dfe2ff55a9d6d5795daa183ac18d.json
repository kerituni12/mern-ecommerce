{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Checkbox, Paper } from \"@material-ui/core\";\nimport EnhancedTableHead from \"./EnhancedTableHeader\";\nimport EnhancedTableToolbar from \"./EnhancedTableToolbar\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    paddingTop: theme.spacing(2)\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2)\n  },\n  table: {\n    minWidth: 750\n  }\n}));\n\nfunction DataTable({\n  data = [],\n  orderByDefault,\n  cellConfigs,\n  checkbox\n}) {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState((orderByDefault === null || orderByDefault === void 0 ? void 0 : orderByDefault.order) || \"asc\");\n  const [orderBy, setOrderBy] = React.useState((orderByDefault === null || orderByDefault === void 0 ? void 0 : orderByDefault.orderBy) || \"title\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      // Get id foreach row and selected\n      const newSelecteds = data.map(({\n        _id: id\n      }) => id);\n      setSelected(newSelecteds);\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  const handleCheck = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n  const renderCheckbox = (isItemSelected, id) => {\n    if (checkbox) {\n      return __jsx(TableCell, {\n        padding: \"checkbox\"\n      }, __jsx(Checkbox, {\n        checked: isItemSelected,\n        onChange: event => handleCheck(event, id)\n      }));\n    }\n  };\n\n  const renderCell = row => {\n    return cellConfigs.map(cell => __jsx(TableCell, {\n      key: row[cell.id],\n      component: \"th\",\n      scope: \"row\",\n      padding: cell.disablePadding ? \"none\" : \"default\",\n      align: cell.numeric ? \"right\" : \"left\"\n    }, row[cell.id]));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(EnhancedTableToolbar, {\n    numSelected: selected.length\n  }), __jsx(TableContainer, null, __jsx(Table, {\n    className: classes.table,\n    \"aria-labelledby\": \"tableTitle\",\n    \"aria-label\": \"enhanced table\"\n  }, __jsx(EnhancedTableHead, {\n    numSelected: selected.length,\n    order: order,\n    orderBy: orderBy,\n    onSelectAllClick: handleSelectAllClick,\n    onRequestSort: handleRequestSort,\n    rowCount: data.length,\n    checkbox: true,\n    cellConfigs: cellConfigs\n  }), data.length == 0 ? null : __jsx(TableBody, null, stableSort(data, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n    const isItemSelected = isSelected(row._id);\n    const labelId = `enhanced-table-checkbox-${index}`;\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row._id,\n      selected: isItemSelected\n    }, renderCheckbox(isItemSelected, row._id), renderCell(row));\n  }), emptyRows > 0 && __jsx(TableRow, {\n    style: {\n      height: 53 * emptyRows\n    }\n  }, __jsx(TableCell, {\n    colSpan: 6\n  }))))), __jsx(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    component: \"div\",\n    count: data.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  })));\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\" ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nexport default DataTable;","map":null,"metadata":{},"sourceType":"module"}