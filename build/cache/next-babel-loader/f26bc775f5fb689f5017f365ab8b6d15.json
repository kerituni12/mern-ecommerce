{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext, useEffect, memo } from \"react\";\nimport Router from \"next/router\";\nimport api from \"services/api\";\nconst AuthContext = /*#__PURE__*/React.createContext({});\n\nfunction AuthProvider({\n  children\n}) {\n  console.log(\"authprovider chay\");\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: isAuthenticated,\n    1: setAuthenticated\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    console.log(\"useEffect chay\");\n\n    async function loadUserFromCookies() {\n      const user = localStorage.getItem(\"userInfo\");\n      if (user) setUser(JSON.parse(user)); //Use can check user by request to server with autocookie send in request\n\n      setLoading(false);\n    }\n\n    loadUserFromCookies();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await api.post(\"api/auth/login\", {\n        email,\n        password\n      });\n\n      if (user) {\n        localStorage.setItem(\"userInfo\", JSON.stringify(user));\n        await setUser(user);\n        await Router.push(\"/admin\");\n      }\n    } catch (err) {\n      return console.error(err.response);\n    }\n  };\n\n  const logout = async () => {\n    localStorage.removeItem(\"userInfo\");\n    await api.post(\"auth/logout\");\n    setUser(null);\n    await Router.push(\"/login\");\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      user,\n      login,\n      loading,\n      logout\n    }\n  }, children);\n}\n\nfunction useAuth() {\n  useContext(AuthContext);\n}\n\nfunction ProtectRoute({\n  children\n}) {\n  const {\n    isAuthenticated,\n    loading\n  } = useContext(AuthContext);\n\n  if (!isAuthenticated) {\n    if (!loading) {\n      Router.push(\"/login\");\n    }\n\n    return __jsx(\"h1\", null, \"Loading\");\n  }\n\n  return children;\n}\n\nexport { AuthContext, AuthProvider, useAuth, ProtectRoute };","map":null,"metadata":{},"sourceType":"module"}