{"ast":null,"code":"var _jsxFileName = \"/home/kin/Desktop/ecom/frontend/src/pages/admin/categories/create.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { MenuItem } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Button, AppBar, Tab, Tabs, Box, Typography, Toolbar, FormControl, InputLabel, OutlinedInput, InputAdornment } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport Link from 'next/link';\nconst currencies = [{\n  value: \"USD\",\n  label: \"$\"\n}, {\n  value: \"EUR\",\n  label: \"€\"\n}, {\n  value: \"BTC\",\n  label: \"฿\"\n}, {\n  value: \"JPY\",\n  label: \"¥\"\n}];\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1,\n    boxShadow: \"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginBottom: theme.spacing(1.5)\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  menu: {\n    width: 200\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction CreateCategory() {\n  console.log('category-render');\n  const classes = useStyles();\n  let categorySchema = yup.object().shape({\n    title: yup.string().required(),\n    slug: yup.string().required()\n  });\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    validationSchema: categorySchema\n  });\n\n  const onSubmit = values => {\n    console.log(values);\n    const {\n      title,\n      slug,\n      description\n    } = values; // ${process.env.REACT_APP_API_BASE}/api/v1/users/login/\n\n    fetch(\"http://localhost:3001/api/category\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // mode: \"cors\",\n      body: JSON.stringify({\n        title: title,\n        slug: slug,\n        description: description\n      })\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    name: \"title\",\n    inputRef: register,\n    label: \"Category\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), __jsx(TextField, {\n    name: \"slug\",\n    inputRef: register,\n    label: \"Slug\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    name: \"description\",\n    inputRef: register,\n    label: \"Description\",\n    defaultValue: \"description\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    className: classes.button,\n    type: \"submit\",\n    variant: \"outlined\",\n    \"aria-label\": \"delete\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Save\")))), __jsx(Link, {\n    href: \"/admin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"admin\"));\n}\n\nexport default /*#__PURE__*/React.memo(CreateCategory);","map":{"version":3,"sources":["/home/kin/Desktop/ecom/frontend/src/pages/admin/categories/create.js"],"names":["React","makeStyles","createStyles","Theme","Paper","Grid","TextField","MenuItem","axios","Button","AppBar","Tab","Tabs","Box","Typography","Toolbar","FormControl","InputLabel","OutlinedInput","InputAdornment","useForm","yup","Link","currencies","value","label","useStyles","theme","root","flexGrow","boxShadow","paper","padding","spacing","textAlign","color","palette","text","secondary","container","display","flexWrap","textField","marginBottom","dense","marginTop","menu","width","button","margin","extendedIcon","marginRight","CreateCategory","console","log","classes","categorySchema","object","shape","title","string","required","slug","register","handleSubmit","errors","validationSchema","onSubmit","values","description","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","email","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { MenuItem } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport {\n  Button,\n  AppBar,\n  Tab,\n  Tabs,\n  Box,\n  Typography,\n  Toolbar,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\n\nimport Link from 'next/link';\nconst currencies = [\n  {\n    value: \"USD\",\n    label: \"$\",\n  },\n  {\n    value: \"EUR\",\n    label: \"€\",\n  },\n  {\n    value: \"BTC\",\n    label: \"฿\",\n  },\n  {\n    value: \"JPY\",\n    label: \"¥\",\n  },\n];\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      boxShadow:\n        \"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    textField: {\n      marginBottom: theme.spacing(1.5),\n    },\n    dense: {\n      marginTop: theme.spacing(2),\n    },\n    menu: {\n      width: 200,\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n    extendedIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n\nfunction CreateCategory() {\n  console.log('category-render');\n  const classes = useStyles();\n\n  let categorySchema = yup.object().shape({\n    title: yup.string().required(),\n    slug: yup.string().required(),\n  });\n\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: categorySchema,\n  });\n\n  const onSubmit = (values) => {\n    console.log(values);\n    const { title, slug, description } = values;\n\n    // ${process.env.REACT_APP_API_BASE}/api/v1/users/login/\n    fetch(\"http://localhost:3001/api/category\", {\n      method: \"POST\",\n      headers: {       \n        'Content-Type': 'application/json',\n      },\n      // mode: \"cors\",\n      body: JSON.stringify({ title:title, slug:slug, description:description }),\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log('Success:', data);\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.container}>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <TextField\n              name=\"title\"\n              inputRef={register}\n              label=\"Category\"\n              className={classes.textField}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n              error={errors.email ? true : false}\n            />\n\n            <TextField\n              name=\"slug\"\n              inputRef={register}\n              label=\"Slug\"\n              className={classes.textField}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n              error={errors.email ? true : false}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              name=\"description\"\n              inputRef={register}\n              label=\"Description\"\n              defaultValue=\"description\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              multiline\n            />\n          </Grid>\n          <Grid item>\n            <Button\n              className={classes.button}\n              type=\"submit\"\n              variant=\"outlined\"\n              aria-label=\"delete\"\n              color=\"primary\"\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n      <Link href=\"/admin\">admin</Link>\n    </div>\n  );\n}\n\n\nexport default React.memo(CreateCategory);"]},"metadata":{},"sourceType":"module"}