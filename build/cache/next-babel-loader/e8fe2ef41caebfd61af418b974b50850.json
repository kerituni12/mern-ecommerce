{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { MenuItem } from \"@material-ui/core\";\nimport { Button, AppBar, Tab, Tabs, Box, Typography, Toolbar, FormControl, InputLabel, OutlinedInput, InputAdornment } from \"@material-ui/core\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as yup from \"yup\";\nconst currencies = [{\n  value: \"USD\",\n  label: \"$\"\n}, {\n  value: \"EUR\",\n  label: \"€\"\n}, {\n  value: \"BTC\",\n  label: \"฿\"\n}, {\n  value: \"JPY\",\n  label: \"¥\"\n}];\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1,\n    boxShadow: \"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginBottom: theme.spacing(1.5)\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  menu: {\n    width: 200\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(\"div\", _extends({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `scrollable-auto-tabpanel-${index}`,\n    \"aria-labelledby\": `scrollable-auto-tab-${index}`\n  }, other), value === index && __jsx(Box, {\n    p: 3\n  }, children));\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n}\n\nexport default function Login() {\n  const classes = useStyles();\n  let loginSchema = yup.object().shape({\n    title: yup.string().required(),\n    price: yup.number().required()\n  });\n  const {\n    register,\n    handleSubmit,\n    errors,\n    control\n  } = useForm({\n    validationSchema: loginSchema\n  });\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const onSubmit = values => {\n    const {\n      title,\n      slug,\n      description,\n      category,\n      price\n    } = values;\n    console.log(values); // ${process.env.REACT_APP_API_BASE}/api/v1/users/login/\n\n    fetch(\"http://localhost:3001/api/product\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      // mode: 'cors',\n      body: JSON.stringify({\n        title,\n        slug,\n        description,\n        category,\n        price\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Success:\", data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(AppBar, {\n    position: \"static\",\n    color: \"default\"\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    variant: \"scrollable\",\n    scrollButtons: \"auto\",\n    \"aria-label\": \"scrollable auto tabs example\"\n  }, __jsx(Tab, _extends({\n    label: \"Item One\"\n  }, a11yProps(0))), __jsx(Tab, _extends({\n    label: \"Item Two\"\n  }, a11yProps(1))))), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: classes.container\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"column\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(TabPanel, {\n    value: value,\n    index: 0\n  }, __jsx(TextField, {\n    name: \"title\",\n    inputRef: register,\n    label: \"Title\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false\n  }), __jsx(TextField, {\n    name: \"slug\",\n    inputRef: register,\n    label: \"Slug\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false\n  }), __jsx(TextField, {\n    name: \"description\",\n    inputRef: register,\n    label: \"Description\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false\n  }), __jsx(Controller, {\n    as: __jsx(TextField, {\n      id: \"outlined-select-currency\",\n      select: true,\n      label: \"Category\" // value={currency}\n      //   onChange={handleChange}\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true\n    }, currencies.map(option => __jsx(MenuItem, {\n      key: option.value,\n      value: option.value\n    }, option.label))),\n    name: \"category\",\n    rules: {\n      required: \"this is required\"\n    },\n    control: control,\n    defaultValue: \"\"\n  }), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.dense,\n    variant: \"outlined\",\n    margin: \"normal\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"outlined-adornment-amount\"\n  }, \"Amount\"), __jsx(OutlinedInput, {\n    id: \"outlined-adornment-amount\",\n    name: \"price\",\n    inputRef: register // value={values.amount}\n    //   onChange={handleChange(\"amount\")}\n    ,\n    startAdornment: __jsx(InputAdornment, {\n      position: \"start\"\n    }, \"$\"),\n    labelWidth: 60\n  }))), __jsx(TabPanel, {\n    value: value,\n    index: 1\n  }, __jsx(TextField, {\n    name: \"email\",\n    inputRef: register,\n    label: \"Enter email\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false\n  }), __jsx(TextField, {\n    name: \"password\",\n    type: \"password\",\n    inputRef: register,\n    label: \"Enter password\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    error: errors.email ? true : false\n  })), __jsx(TabPanel, {\n    value: value,\n    index: 2\n  }, \"Item Three\"), __jsx(TabPanel, {\n    value: value,\n    index: 3\n  }, \"Item Four\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    className: classes.button,\n    type: \"submit\",\n    variant: \"outlined\",\n    \"aria-label\": \"delete\",\n    color: \"primary\"\n  }, \"Continue\")))));\n}","map":null,"metadata":{},"sourceType":"module"}